{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-09-28--pipenv/","result":{"data":{"site":{"siteMetadata":{"title":"Concigel's Blog"}},"markdownRemark":{"id":"2e0a3668-b8a6-5369-a46c-a254263fe072","excerpt":"以前は Python の構築は virtualenv で行なっていたが、他のプログラム言語と比べて構成が異なるのが気になって、Pipenv について調べてみた。 Pipenv インストール anyenv を利用して pyenv をインストールする(python のバージョンは好みで) pipenv…","html":"<p>以前は Python の構築は virtualenv で行なっていたが、他のプログラム言語と比べて構成が異なるのが気になって、Pipenv について調べてみた。</p>\n<h1>Pipenv インストール</h1>\n<p>anyenv を利用して pyenv をインストールする(python のバージョンは好みで)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ anyenv install pyenv\n$ exec $SHELL -l\n$ pyenv install anaconda3-5.3.1\n$ pyenv global anaconda3-5.3.1</code></pre></div>\n<p>pipenv をインストールする。--user をつけることでユーザーディレクトリに install される。mac の上記環境の python であれば $HOME/.local/bin\nにインストールされたが、環境により $HOME/Library であったり異なるらしい。パスが通っているか確認する。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install --user pipenv\n$ pipenv --version</code></pre></div>\n<h1>仮想環境</h1>\n<p>仮想環境はやはり作らないといけないらしい。プロジェクトのディレクトリを作り、python インタープリターをインストールする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir project1\n$ cd projet1\n$ pipenv --python 3.7.0</code></pre></div>\n<p>これで Python 3.7.0 のインストールと仮想環境の構築ができる。カレントディレクトリに Pipfile という設定ファイルが生成される。</p>\n<p>仮想環境を有効にするには、<code class=\"language-text\">pipenv shell</code> で shell を起動するか、直接 <code class=\"language-text\">pipenv run python &lt;args></code> のように実行する。</p>\n<p>構築された仮想環境のパスは --venv オプションで確認できる</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pipenv --venv</code></pre></div>\n<h2>Django インストール</h2>\n<p>pipenv install コマンドで Django をインストールする。\nインストールされたパッケージの一覧は、pipenv run pip list で確認できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pipenv install django==2.2.5\n$ pipenv run pip list\nPackage    Version\n---------- -------\nDjango     2.2.5\npip        19.2.3\npytz       2019.2\nsetuptools 41.2.0\nsqlparse   0.3.0\nwheel      0.33.6</code></pre></div>\n<p>プロジェクトの作成は django-admin が使えるようになっているのでそちらで作成する。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ django-admin startporject myproject</code></pre></div>\n<p>以下のようなディレクトリとファイルが生成される。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">project1\n├── myproject\n│  ├── manage.py\n│  └── myproject\n│     ├── __init__.py\n│     ├── settings.py\n│     ├── urls.py\n│     └── wsgi.py\n├── Pipfile\n└── Pipfile.lock</code></pre></div>\n<p>生成された manage.py により実行する(pipenv shell より)。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ python manage.py migrate\n$ python manage.py runserver</code></pre></div>\n<p>デフォルトでは host: 127.0.0.1 port: 8000 で実行されるので、変更する場合は <code class=\"language-text\">python manage.py runserver 0:3000</code> などとする。</p>","frontmatter":{"title":"Pipenv による Web Application の構築","date":"September 28, 2019","description":"以前は Python の構築は virtualenv で行なっていたが、他のプログラム言語と比べて構成が異なるのが気になって、Pipenv について調べてみた。"}},"previous":{"fields":{"slug":"/2019-09-02--scrum-masters-night/"},"frontmatter":{"title":"Scrum Masters Night に行ってきました"}},"next":{"fields":{"slug":"/2019-10-23--scrum-master-taining/"},"frontmatter":{"title":"認定スクラムマスタートレーニングを受けてきました"}}},"pageContext":{"id":"2e0a3668-b8a6-5369-a46c-a254263fe072","previousPostId":"0a10e42c-1a4d-5f74-b645-643307a98000","nextPostId":"d483a138-945c-5ae1-ae17-acabd03fcc7d"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}